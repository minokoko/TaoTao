package com.taotao.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.taotao.common.pojo.EasyUITreeNode;
import com.taotao.common.pojo.TaotaoResult;
import com.taotao.mapper.TbContentCategoryMapper;
import com.taotao.pojo.TbContentCategory;
import com.taotao.pojo.TbContentCategoryExample;
import com.taotao.pojo.TbContentCategoryExample.Criteria;
import com.taotao.service.ContentCategoryService;

/**
 * 内容管理Service
 * 
 * @author jessyon
 *
 */
@Service
public class ContentCategoryServiceImpl implements ContentCategoryService {

	@Autowired
	private TbContentCategoryMapper contentCategoryMapper;

	@Override
	public List<EasyUITreeNode> getContentList(Long parentId) {

		// 按条件查询子节点列表
		TbContentCategoryExample example = new TbContentCategoryExample();
		Criteria criteria = example.createCriteria();

		// 查询条件为parentId
		criteria.andParentIdEqualTo(parentId);

		// 执行查询
		List<TbContentCategory> list = contentCategoryMapper.selectByExample(example);

		// 转换成EasyUITreeNode列表
		List<EasyUITreeNode> resultList = new ArrayList<EasyUITreeNode>();

		for (TbContentCategory tbContentCategory : list) {

			EasyUITreeNode treeNode = new EasyUITreeNode();
			treeNode.setId(tbContentCategory.getId());
			treeNode.setText(tbContentCategory.getName());
			// 如果没有子节点为open,如果有子节点为closed
			treeNode.setState(tbContentCategory.getIsParent() ? "closed" : "open");
			resultList.add(treeNode);

		}

		return resultList;
	}

	@Override
	public TaotaoResult insertCategory(Long parentId, String name) {

		TbContentCategory contentCategory = new TbContentCategory();
		contentCategory.setParentId(parentId);
		contentCategory.setName(name);
		// 添加状态，1为正常，2删除
		contentCategory.setStatus(1);
		contentCategory.setIsParent(false);
		// 设置排列序号,表示同级目录的展示优先级,取值为大于零的整数
		contentCategory.setSortOrder(1);
		contentCategory.setCreated(new Date());
		contentCategory.setUpdated(new Date());

		// 插入数据库
		contentCategoryMapper.insert(contentCategory);
		Long id = contentCategory.getId();
		// 判断父节点的isParent属性
		// 查询父节点
		TbContentCategory parentNode = contentCategoryMapper.selectByPrimaryKey(parentId);
		if (!parentNode.getIsParent()) {
			parentNode.setIsParent(true);
			// 更新父节点
			contentCategoryMapper.updateByPrimaryKey(parentNode);
		}

		// 返回主键
		return TaotaoResult.ok(id);
	}

	@Override
	public void updateCategoryName(Long id, String name) {
		TbContentCategory node = contentCategoryMapper.selectByPrimaryKey(id);
		node.setName(name);
		contentCategoryMapper.updateByPrimaryKey(node);
	}

	@Override
	public void deleteById(Long id) {
		
		//根据id查询要删除的node
		TbContentCategory node = contentCategoryMapper.selectByPrimaryKey(id);
		
		
		Long parentId = node.getParentId();
		
		
		//根据ID删除节点
		int deleteByPrimaryKey = contentCategoryMapper.deleteByPrimaryKey(id);
		//根据node的parentId找到父节点
		TbContentCategory parentNode = contentCategoryMapper.selectByPrimaryKey(parentId);
	}

}
